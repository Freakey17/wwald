CREATE TABLE COURSE (
	id VARCHAR(16) NOT NULL PRIMARY KEY,
	title VARCHAR(128) NOT NULL,
	description LONGVARCHAR);

CREATE TABLE COMPETENCY (
	id INTEGER NOT NULL,
	course_id VARCHAR(16) NOT NULL,
	title VARCHAR(128) NOT NULL,
	description LONGVARCHAR,
	resources LONGVARCHAR,
	PRIMARY KEY(id, course_id),
		CONSTRAINT course_id_fk FOREIGN KEY (course_id) REFERENCES COURSE(id));

CREATE TABLE COURSES_WIKI (
	id INTEGER NOT NULL PRIMARY KEY,
	content LONGVARCHAR);
 
CREATE TABLE COURSE_COMPETENCIES_WIKI (
	course_id VARCHAR(16) NOT NULL PRIMARY KEY,
	contents LONGVARCHAR,
		CONSTRAINT course_competencies_wiki_fk1 FOREIGN KEY (course_id) REFERENCES COURSE(id));

CREATE TABLE USER_META (
	userid IDENTITY,
	identifier VARCHAR(256),
	login_via VARCHAR(32),
	role VARCHAR(32)
);

CREATE TABLE USER (	
	username VARCHAR(16) NOT NULL PRIMARY KEY,
	password VARCHAR(128) NOT NULL,
	email VARCHAR(128) NOT NULL);
		 
CREATE TABLE COURSE_ENROLLMENT_ACTIONS (
	course_id VARCHAR(16) NOT NULL,
	userid INTEGER NOT NULL,
	course_enrollment_action_id INTEGER NOT NULL,
	tstamp TIMESTAMP,
		CONSTRAINT course_id_fk1 FOREIGN KEY (course_id) REFERENCES COURSE(id),
		CONSTRAINT userid_fk2 FOREIGN KEY (userid) REFERENCES USER_META(userid));
	 
CREATE TABLE COURSE_ENROLLMENT_STATUS_MASTER (
	id INTEGER NOT NULL PRIMARY KEY,
	status VARCHAR(16));
	
CREATE TABLE COURSE_MENTORS (
	course_id VARCHAR(16) NOT NULL,
	mentor_userid INTEGER NOT NULL,
	PRIMARY KEY(course_id, mentor_userid),
		CONSTRAINT course_mentors_col1_fk FOREIGN KEY (course_id) REFERENCES COURSE(id),
		CONSTRAINT course_mentors_col2_fk FOREIGN KEY (mentor_userid) REFERENCES USER_META(userid));

CREATE TABLE COURSE_ENROLLMENTS (
	userid INTEGER NOT NULL,
	course_id VARCHAR(16) NOT NULL,	
	PRIMARY KEY(course_id, userid),		
		CONSTRAINT course_enrollments_col1_fk FOREIGN KEY (userid) REFERENCES USER_META(userid),
		CONSTRAINT course_enrollments_col2_fk FOREIGN KEY (course_id) REFERENCES COURSE(id));

CREATE TABLE STATIC_PAGES (
	id VARCHAR(32) NOT NULL PRIMARY KEY,	
	contents LONGVARCHAR);
	
CREATE TABLE DISCUSSION (
	id VARCHAR(64) PRIMARY KEY,
	title VARCHAR(256),
	description LONGVARCHAR);
	
CREATE TABLE QUESTION (
	id IDENTITY,
	discussion_id VARCHAR(64),	
	title VARCHAR (128),
	contents LONGVARCHAR,
		CONSTRAINT question_col1_fk FOREIGN KEY (discussion_id) REFERENCES DISCUSSION(id));

CREATE TABLE QUESTIONS_ANSWERED (
	question_id INTEGER NOT NULL PRIMARY KEY,
		CONSTRAINT questions_answered_col1_fk FOREIGN KEY (question_id) REFERENCES QUESTION(id));

CREATE TABLE ANSWER (
	id IDENTITY,
	question_id INTEGER,	
	contents LONGVARCHAR,
		CONSTRAINT answer_col1_fk FOREIGN KEY (question_id) REFERENCES QUESTION(id));

CREATE TABLE QUESTION_TAGS (
	id IDENTITY,
	question_id INTEGER,
	tag VARCHAR(128),
		CONSTRAINT question_tags_fk FOREIGN KEY (question_id) REFERENCES QUESTION(id));
	
CREATE TABLE QUESTION_LIKES (
	question_id INTEGER PRIMARY KEY,
	likes INTEGER,
		CONSTRAINT question_likes_fk FOREIGN KEY (question_id) REFERENCES QUESTION(id));
		
CREATE TABLE QUESTION_USER_LIKES (
	question_id INTEGER,
	userid INTEGER,
	PRIMARY KEY(question_id, userid),
		CONSTRAINT question_user_likes_col1_fk FOREIGN KEY (question_id) REFERENCES QUESTION(id),
		CONSTRAINT question_user_likes_col2_fk FOREIGN KEY (userid) REFERENCES USER_META(userid));
		
CREATE TABLE ANSWER_LIKES (
	answer_id INTEGER PRIMARY KEY,
	likes INTEGER,
		CONSTRAINT answer_likes_fk FOREIGN KEY (answer_id) REFERENCES ANSWER(id));
		
CREATE TABLE ANSWER_USER_LIKES (
	answer_id INTEGER,
	userid INTEGER,
	PRIMARY KEY(answer_id, userid),
		CONSTRAINT answer_user_likes_col1_fk FOREIGN KEY (answer_id) REFERENCES ANSWER(id),
		CONSTRAINT answer_user_likes_col2_fk FOREIGN KEY (userid) REFERENCES USER_META(userid));

CREATE TABLE KVTABLE (
	k VARCHAR(64) NOT NULL PRIMARY KEY,
	v VARCHAR(128));
	
CREATE TABLE KVTABLE_CLOB (
	k VARCHAR(64) NOT NULL PRIMARY KEY,
	v LONGVARCHAR);
	
CREATE TABLE KVTABLE_BLOB (
	k VARCHAR(64) NOT NULL PRIMARY KEY,
	v LONGVARBINARY);
	
	